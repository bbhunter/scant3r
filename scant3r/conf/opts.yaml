url:
  - option:
    - '-u'
    - '--url'
  - type: string
  - default: ''
  - save_content: true
  - help: "Your target URL"
  - exec: "dict_args['url'] = value"


exit_after:
  - option: 
    - '-e'
    - "--exit-after"
  - type: int
  - default: 500
  - save_content: true
  - help: "Exit after get this number of errors"
  - exec: "dict_args['exit_after'] = int(value)"

  
callback_time:
  - option:
    - "-ct"
    - "--callback-time"
  - type: int
  - default: 0.5
  - save_content: true
  - help: "Callback timeout"
  - exec: "dict_args['callback_time'] = int(value)"

convert_body:
  - option:
    - "-c"
    - "--convert-body"
  - type: boolean
  - default: false
  - save_content: false
  - help: "Change the url parameters into request body ( in non-GET methods )"
  - exec: "dict_args['convert_body'] = value"


output_file:
  - option:
    - "-o"
    - "--output"
  - type: string
  - default: ""
  - save_content: true
  - help: "The output json file location"
  - exec: "dict_args['output'] = value"

headers:
  - option: 
    - '-H'
    - "--header"
  - type: string
  - default: '{}'
  - save_content: true
  - help: "add custom header (ex:-H='Cookie: test=1; PHPSESSID=test')"
  - exec: |
      from scant3r.core.utils import extract_headers
      dict_args['headers'] = extract_headers(value)

cookies: 
  - option:
    - '-C'
    - '--cookie'
  - type : string
  - default: '{}'
  - save_content : true 
  - help: "add cookie to the header (ex: 'cookie1=1; cookie2=2')"
  - exec: |
      from scant3r.core.utils import extract_cookie
      dict_args['cookies'] = extract_cookie(value)

log_mode:
  - option: 
    - '-v'
    - '--logger-mode'
  - type: int
  - default: 2
  - save_content: true
  - help: 'change debug messages mode (1: info 2: debug 3: warning 4: error)'
  - exec: |
      from os.path import isfile
      import os
      from scant3r.core.data import LOGGING_FORMAT, LOGGING_FILE, CLEAR_LOGGING_FILE
      logs = {1:logging.INFO,2:logging.DEBUG,3:logging.WARNING,4:logging.ERROR}
      logger = logging.getLogger("scant3r")
      logger.setLevel(logs[value])
      if CLEAR_LOGGING_FILE:
        if isfile(LOGGING_FILE):
          os.remove(LOGGING_FILE)
      ch = logging.FileHandler(LOGGING_FILE)
      ch.setLevel(logs[value])
      fmt = logging.Formatter(LOGGING_FORMAT)
      ch.setFormatter(fmt)
      logger.addHandler(ch)



delay:
  - option: 
    - '-s'
    - '--sleep'
  - type: int
  - default: 0
  - save_content: true
  - help: 'number of seconds to hold between each HTTP(S) requests.'
  - exec: "dict_args['delay'] = int(value)"


methods:
  - option: 
    - '-M'
    - '--method'
  - type: string
  - default: 'GET'
  - save_content: true
  - help: 'Methods Allowed on your target'
  - exec: | 
      dict_args['methods'] = value.split(",")

modules:
  - option: 
    - '-m'
    - '--module'
  - help: 'run scant3r module (ex: -m=example)'
  - type: string
  - default: '[]'
  - save_content: true
  - exec: |
      from scant3r.core.data import ENABLED_MODS
      if value == "all":
        dict_args['modules'] = ENABLED_MODS
      else:
        dict_args['modules'] = value.split(",")
more_scan:
  - option: 
    - '-O'
    - '--more-scan'
  - help: 'scanning with the current module with import another modules (eg: lorsrf xss/ssti scanner)'
  - type: boolean
  - default: false
  - save_content: false
  - exec: "dict_args['more_scan'] = value"

lorsrf_parameters:
  - option:
    - '-P'
    - '--lorsrf-parameters'
  - help: 'how many parameters in one request for lorsrf module'
  - type: int
  - default: 10
  - save_content: true
  - exec: "dict_args['lorsrf_parameters'] = value" 

targetlist:
  - option: 
    - '-l'
    - '--list'
  - type: boolean
  - default: False
  - help: 'add targets list'
  - save_content: true
  - exec: |
        try:
          dict_args['targetlist'] = open(value,'r')
          for url in dict_args['targetlist']:
            dict_args['urls'].append(url.rstrip())
        except Exception as e:
            exit()

genparam:
  - option: 
    - '-g'
    - '--add-parameters'
  - type: boolean
  - default: false
  - help: "Generate Famouse Parameters if your url dosen't have parameters"
  - save_content: false
  - exec: "dict_args['genparam'] = value"

json:
  - option:
    - '-j'
    - '--json'
  - type: boolean
  - default: false
  - help: "JSON Request Body"
  - save_content: false
  - exec: "dict_args['json'] = value"

proxy:
  - option: 
    - '-p'
    - '--proxy'
  - help: 'Forward all requests to proxy'
  - type: string
  - default: '{}'
  - save_content: true
  - exec: "dict_args['proxy'] = {'http':value.replace('https://','http://'),'https':value}"

allow_redirects:
  - option: 
    - '-r'
    - '--follow-redirects'
  - type: boolean
  - default: false
  - help: 'Follow redirects'
  - save_content: false
  - exec: "dict_args['allow_redirects'] = value"

blindxss:
  - option:
    - '-b'
    - '--blind-host'
  - type: string
  - default: ''
  - help: 'add your xsshunter host (or any xss host)'
  - save_content: true
  - exec: "dict_args['xsshost'] = value"

host:
  - option: 
    - '-x'
    - '--host'
  - type: string
  - default: ''
  - help: 'add your host (burpcall,etc..)'
  - save_content: true
  - exec: "dict_args['host'] = value"

random_agents:
  - option: 
    - '-R'
    - '--random-agents'
  - type: boolean
  - default: false
  - help: 'use random user agent'
  - save_content: false
  - exec: "dict_args['random_agents'] = True"

threads:
  - option: 
    - '-w'
    - '--workers'
  - type: int
  - default: 50
  - help: 'Number of workers (default: 50)'
  - save_content: true
  - exec: "dict_args['threads'] = value"

timeout:
  - option: 
    - '-t'
    - '--timeout'
  - type: int
  - default: 10
  - help: 'set connection timeout (default: 10)'
  - save_content: true
  - exec: "dict_args['timeout'] = value"
